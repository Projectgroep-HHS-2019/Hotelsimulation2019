@startuml

title __PERSONS's Class Diagram__\n

  namespace Persons {
    class Persons.Cleaner {
        {static} + EmergencyRoomCleaningList : ArrayList<Area>
        {static} + roomCleaningList : ArrayList<Area>
        - cleaningTime : int
        - cleaningTimeRemaining : int
        - waitInFrontOfDoor : int
        + Cleaner()
        {static} + getEmergencyRoomCleaningList()
        {static} + getRoomCleaningList()
        + performAction()
        {static} + setEmergencyRoomCleaningList()
        + setRoomCleaningList()
        - assignEmergencyRoomToClean()
        - assignRoomToClean()
        - checkCleaningList()
        - cleanRoom()
        - setCleaningTime()
    }
  }
  

  namespace Persons {
    class Persons.Guest {
        + restaurantsToCheck : ArrayList<Area>
        + roomId : int
        - alive : boolean
        - queueTime : int
        + Guest()
        + checkDistanceArea()
        + getSelectedRoom()
        + performAction()
        + setRoomId()
        - die()
        - performActionCheckOut()
        - performActionCheckRestaurantQueue()
        - performActionGoBackToRoomNoRoute()
        - performActionGoOutside()
        - performActionGoToCinema()
        - performActionGoToFitness()
        - performActionInQueue()
        - performActionInRestaurant()
        - performActionInsideCinema()
        - performActionInsideFitness()
        - performActionLeaveHotelNoRoute()
        - performActionNeedFood()
        - performActionReenteredNoRoute()
    }
  }
  

  namespace Persons {
    abstract class Persons.Person {
        + currentRoute : ArrayList<Area>
        + restaurantsToCheck : ArrayList<Area>
        {static} + roomCleaningList : ArrayList<Area>
        + roomId : int
        # fitnessTickAmount : int
        # id : int
        # moveAllowed : boolean
        # personImageView : ImageView
        # restaurantTickAmount : int
        # stairsWaitTime : int
        # status : String
        # translateXVal : int
        # translateYVal : int
        # visibility : boolean
        # x : int
        # y : int
        - alive : boolean
        + checkDistanceArea()
        + clearRoute()
        + getAliveStatus()
        + getAvailability()
        + getCurrentPosition()
        + getFitnessTickAmount()
        + getId()
        + getLastArea()
        {static} + getLobby()
        + getRoute()
        + getSelectedRoom()
        + getStatus()
        + getX()
        + getY()
        + isVisibility()
        + moveAllowed()
        + moveToArea()
        + performAction()
        + setAvailability()
        + setDead()
        + setFitnessTickAmount()
        + setId()
        + setInvisible()
        + setRoomId()
        + setSprite()
        + setStatus()
        + setVisibility()
        + setVisible()
        + setX()
        + setY()
        # clearDistances()
        - moveDown()
        - moveLeft()
        - moveRight()
        - moveUp()
    }
  }
  

  Persons.Cleaner -up-|> Persons.Person
  Persons.Cleaner o-- Areas.Area : currentRoomToClean
  Persons.Guest -up-|> Persons.Person
  Persons.Person o-- ShortestPath.Dijkstra : _ds


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
